# Step 1: Aggregate data by Ward to get the total approved affordable homes
aggregated_data <- data %>%
group_by(Ward) %>%
summarise(Total_Affordable_Homes = sum(Affordable.Homes.Approved..2020...Present., na.rm = TRUE))
# Step 2: Create a bar plot with total approved affordable homes and label the bar heights
ggplot(aggregated_data, aes(x = factor(Ward), y = Total_Affordable_Homes)) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.7) +
geom_text(aes(label = Total_Affordable_Homes), vjust = -0.5, size = 3.5) +  # Adding total homes as labels on top of bars
labs(title = "Occupied Affordable Homes by Ward",
x = "Ward",
y = "Number of Approved Affordable Homes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
#| echo: false
#| warning: false
#| message: false
#| label: fig-totalapproved
#| fig-cap: "Total Approved Affordable Homes by Ward"
#### Second Graph ####
# This code is based on knowledge from Alexander (2023).
library(ggplot2)
aggregated_data <- data %>%
group_by(Ward) %>%
summarise(Total_Affordable_Homes = sum(Affordable.Homes.Approved..2020...Present., na.rm = TRUE))
# Create a bar plot for total approved affordable homes by ward with labels
ggplot(aggregated_data, aes(x = factor(Ward), y = Total_Affordable_Homes)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_text(aes(label = Total_Affordable_Homes), vjust = -0.5, size = 3.5) +  # Add labels on top of bars
labs(title = "Total Approved Affordable Homes by Ward",
x = "Ward",
y = "Total Approved Affordable Homes") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_minimal()
#### First Graph ####
#| echo: false
#| warning: false
#| message: false
#| label: fig-occupied
#| fig-cap: "Occupied Affordable Homes by Ward"
# This code is based on knowledge from Alexander (2023).
# Step 1: Aggregate data by Ward to get the total approved affordable homes
aggregated_data <- data %>%
group_by(Ward) %>%
summarise(Total_Affordable_Homes = sum(Affordable.Homes.Approved..2020...Present., na.rm = TRUE))
# Step 2: Create a bar plot with total approved affordable homes and label the bar heights
ggplot(aggregated_data, aes(x = factor(Ward), y = Total_Affordable_Homes)) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.7) +
geom_text(aes(label = Total_Affordable_Homes), vjust = -0.5, size = 3.5) +  # Adding total homes as labels on top of bars
labs(title = "Occupied Affordable Homes by Ward",
x = "Ward",
y = "Number of Approved Affordable Homes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
#### Third Graph ####
#| echo: false
#| warning: false
#| message: false
#| label: fig-statusdistrubution
#| fig-cap: "Projects Status Distribution"
# This code is based on knowledge from Alexander (2023).
# Create a pie chat for distribution of approved projects' status
data %>%
count(Status) %>%
ggplot(aes(x = "", y = n, fill = Status)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(title = "Project Status Distribution", x = "", y = "") +
theme_void() +
theme(legend.position = "right")
#| echo: false
#| warning: false
#| message: false
#### Loading the Cleaned Dataset ####
marriage_licence_packages <- search_packages("Affordable Housing Pipeline")
# Retrieve a list of all resources (datasets) available within the found package
marriage_licence_resources <- marriage_licence_packages %>%
list_package_resources()
# Display the list of resources available in the "Marriage Licence Statistics" package
marriage_licence_resources
marriage_licence_statistics <- marriage_licence_resources[4,] %>%
get_resource()
data = marriage_licence_statistics
write_csv(marriage_licence_statistics, "/Users/luuu/Downloads/starter_folder-main/data4.csv")
#### First Graph ####
#| echo: false
#| warning: false
#| message: false
#| label: fig-occupied
#| fig-cap: "Occupied Affordable Homes by Ward"
# This code is based on knowledge from Alexander (2023).
# Step 1: Aggregate data by Ward to get the total approved affordable homes
aggregated_data <- data %>%
group_by(Ward) %>%
summarise(Total_Affordable_Homes = sum(Affordable.Homes.Approved..2020...Present., na.rm = TRUE))
# Step 2: Create a bar plot with total approved affordable homes and label the bar heights
ggplot(aggregated_data, aes(x = factor(Ward), y = Total_Affordable_Homes)) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.7) +
geom_text(aes(label = Total_Affordable_Homes), vjust = -0.5, size = 3.5) +  # Adding total homes as labels on top of bars
labs(title = "Occupied Affordable Homes by Ward",
x = "Ward",
y = "Number of Approved Affordable Homes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
#### First Graph ####
#| echo: false
#| warning: false
#| message: false
#| label: fig-occupied
#| fig-cap: "Occupied Affordable Homes by Ward"
# This code is based on knowledge from Alexander (2023).
# Step 1: Aggregate data by Ward to get the total approved affordable homes
aggregated_data <- data %>%
group_by(Ward) %>%
summarise(Total_Affordable_Homes = sum(Affordable.Homes.Approved..2020...Present., na.rm = TRUE))
# Step 2: Create a bar plot with total approved affordable homes and label the bar heights
ggplot(aggregated_data, aes(x = factor(Ward), y = Total_Affordable_Homes)) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.7) +
geom_text(aes(label = Total_Affordable_Homes), vjust = -0.5, size = 3.5) +  # Adding total homes as labels on top of bars
labs(title = "Occupied Affordable Homes by Ward",
x = "Ward",
y = "Number of Approved Affordable Homes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
# Save the simulated data to a CSV file
write.csv(simulated_data, "/Users/luuu/Downloads/starter_folder-main/output/data/siulate_data/simulate_data.csv")
# Save the simulated data to a CSV file
write_csv(simulated_data, "/Users/luuu/Downloads/starter_folder-main/output/data/simulated_data")
library(tidyverse)
set.seed(1008047418)  # For reproducibility
n <- 100  # Number of rows to simulate
id <- 1:n  # ID column
status <- sample(c("Under Review", "Pre-Planning", "Under Construction", "Occupied", "Cancelled", "Final Planning Approval"), n, replace = TRUE)  # Status column
ward <- sample(1:25, n, replace = TRUE)  # Ward column (1 to 25)
affordable_homes_approved <- sample(0:2000, n, replace = TRUE)  # Affordable Homes Approved by 2020
simulated_data <- data.frame(ID = id, Status = status, Ward = ward, Affordable_Homes_Approved_2020 = affordable_homes_approved)
head(simulated_data)
write_csv(simulated_data, "/Users/luuu/Downloads/starter_folder-main/output/data/simulated_data")
# Save the simulated data to a CSV file
write_csv(simulated_data, "/Users/luuu/Downloads/starter_folder-main/output/data/simulated_data/simulated_data.csv")
#### Test data ####
simulated_data <- read_csv("/Users/luuu/Downloads/starter_folder-main/output/data/simulated_data/simulated_data.csv")
cleaned_data <- read_csv("/Users/luuu/Downloads/starter_folder-main/output/data/analysis_data/analysis_data")
#### Save data ####
write_csv(cleaned_data, "/Users/luuu/Downloads/starter_folder-main/output/data/analysis_data/cleaned_data.csv"
# Save the simulated data to a CSV file
write_csv(simulated_data, "/Users/luuu/Downloads/starter_folder-main/output/data/simulated_data.csv")
# Save the simulated data to a CSV file
write_csv(simulated_data, "/Users/luuu/Downloads/starter_folder-main/output/data/simulated_data")
# Save the simulated data to a CSV file
write_csv(simulated_data, "/Users/luuu/Downloads/starter_folder-main/output/data/simulated_data.csv")
#### Save data ####
write_csv(cleaned_data, "/Users/luuu/Downloads/starter_folder-main/output/data/cleaned_data.csv"
#### Save data ####
write_csv(cleaned_data, "/Users/luuu/Downloads/starter_folder-main/output/data/cleaned_data.csv"
#### Save data ####
write_csv(cleaned_data, "/Users/luuu/Downloads/starter_folder-main/output/data/cleaned_data.csv"
#### Save data ####
write_csv(cleaned_data, "/Users/luuu/Downloads/starter_folder-main/output/data/cleaned_data.csv")
write_csv(cleaned_data, "/Users/luuu/Downloads/starter_folder-main/output/data/cleaned_data.csv")
cleaned_data <- read_csv("/Users/luuu/Downloads/starter_folder-main/output/data/cleaned_data.csv")
#| echo: false
#| warning: false
#| message: false
#| label: fig-totalapproved
#| fig-cap: "Total Approved Affordable Homes by Ward"
#### Second Graph ####
# This code is based on knowledge from Alexander (2023).
library(ggplot2)
aggregated_data <- data %>%
group_by(Ward) %>%
summarise(Total_Affordable_Homes = sum(Affordable.Homes.Approved..2020...Present., na.rm = TRUE))
#| echo: false
#| warning: false
#### Preamble ####
# Purpose: Generates a paper titled "Uneven Progress: A Study of Affordable
#Housing Distribution and Development in Torontoâ€™s Wards in PDF format when
# rendered.
# Author: Claire Ma
# Date: September 27, 2024
# Contact: minglu.ma@mail.utoronto.ca
# Pre-requisites: Run the files "01-download_data.R" and "02-data_cleaning.R".
#| echo: false
#| include: false
#| message: false
#| warning: false
#### Loading Packages ####
library(opendatatoronto)
library(tidyverse)
#| echo: false
#| warning: false
#| message: false
#### Loading the Cleaned Dataset ####
marriage_licence_packages <- search_packages("Affordable Housing Pipeline")
# Retrieve a list of all resources (datasets) available within the found package
marriage_licence_resources <- marriage_licence_packages %>%
list_package_resources()
# Display the list of resources available in the "Marriage Licence Statistics" package
marriage_licence_resources
marriage_licence_statistics <- marriage_licence_resources[4,] %>%
get_resource()
data = marriage_licence_statistics
write_csv(marriage_licence_statistics, "/Users/luuu/Downloads/starter_folder-main/data4.csv")
#### First Graph ####
#| echo: false
#| warning: false
#| message: false
#| label: fig-occupied
#| fig-cap: "Occupied Affordable Homes by Ward"
# This code is based on knowledge from Alexander (2023).
# Step 1: Aggregate data by Ward to get the total approved affordable homes
aggregated_data <- data %>%
group_by(Ward) %>%
summarise(Total_Affordable_Homes = sum(Affordable.Homes.Approved..2020...Present., na.rm = TRUE))
# Step 2: Create a bar plot with total approved affordable homes and label the bar heights
ggplot(aggregated_data, aes(x = factor(Ward), y = Total_Affordable_Homes)) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.7) +
geom_text(aes(label = Total_Affordable_Homes), vjust = -0.5, size = 3.5) +  # Adding total homes as labels on top of bars
labs(title = "Occupied Affordable Homes by Ward",
x = "Ward",
y = "Number of Approved Affordable Homes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
#| echo: false
#| warning: false
#| message: false
#| label: fig-totalapproved
#| fig-cap: "Total Approved Affordable Homes by Ward"
#### Second Graph ####
# This code is based on knowledge from Alexander (2023).
library(ggplot2)
aggregated_data <- data %>%
group_by(Ward) %>%
summarise(Total_Affordable_Homes = sum(Affordable.Homes.Approved..2020...Present., na.rm = TRUE))
# Create a bar plot for total approved affordable homes by ward with labels
ggplot(aggregated_data, aes(x = factor(Ward), y = Total_Affordable_Homes)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_text(aes(label = Total_Affordable_Homes), vjust = -0.5, size = 3.5) +  # Add labels on top of bars
labs(title = "Total Approved Affordable Homes by Ward",
x = "Ward",
y = "Total Approved Affordable Homes") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_minimal()
#### First Graph ####
#| echo: false
#| warning: false
#| message: false
#| label: fig-occupied
#| fig-cap: "Occupied Affordable Homes by Ward"
# This code is based on knowledge from Alexander (2023).
# Step 1: Aggregate data by Ward to get the total approved affordable homes
aggregated_data <- data %>%
group_by(Ward) %>%
summarise(Total_Affordable_Homes = sum(Affordable.Homes.Approved..2020...Present., na.rm = TRUE))
# Step 2: Create a bar plot with total approved affordable homes and label the bar heights
ggplot(aggregated_data, aes(x = factor(Ward), y = Total_Affordable_Homes)) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.7) +
geom_text(aes(label = Total_Affordable_Homes), vjust = -0.5, size = 3.5) +  # Adding total homes as labels on top of bars
labs(title = "Occupied Affordable Homes by Ward",
x = "Ward",
y = "Number of Approved Affordable Homes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
#### Third Graph ####
#| echo: false
#| warning: false
#| message: false
#| label: fig-statusdistrubution
#| fig-cap: "Projects Status Distribution"
# This code is based on knowledge from Alexander (2023).
# Create a pie chat for distribution of approved projects' status
data %>%
count(Status) %>%
ggplot(aes(x = "", y = n, fill = Status)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(title = "Project Status Distribution", x = "", y = "") +
theme_void() +
theme(legend.position = "right")
#### First Graph ####
#| echo: false
#| warning: false
#| message: false
#| label: fig-occupied
#| fig-cap: "Occupied Affordable Homes by Ward"
# This code is based on knowledge from Alexander (2023).
# Step 1: Aggregate data by Ward to get the total approved affordable homes
aggregated_data <- data %>%
group_by(Ward) %>%
summarise(Total_Affordable_Homes = sum(Affordable.Homes.Approved..2020...Present., na.rm = TRUE))
# Step 2: Create a bar plot with total approved affordable homes and label the bar heights
ggplot(aggregated_data, aes(x = factor(Ward), y = Total_Affordable_Homes)) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.7) +
geom_text(aes(label = Total_Affordable_Homes), vjust = -0.5, size = 3.5) +  # Adding total homes as labels on top of bars
labs(title = "Occupied Affordable Homes by Ward",
x = "Ward",
y = "Number of Approved Affordable Homes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
#### Third Graph ####
#| echo: false
#| warning: false
#| message: false
#| label: fig-statusdistrubution
#| fig-cap: "Projects Status Distribution"
# This code is based on knowledge from Alexander (2023).
# Create a pie chat for distribution of approved projects' status
data %>%
count(Status) %>%
ggplot(aes(x = "", y = n, fill = Status)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(title = "Project Status Distribution", x = "", y = "") +
theme_void() +
theme(legend.position = "right")
#### First Graph ####
#| echo: false
#| warning: false
#| message: false
#| label: fig-occupied
#| fig-cap: "Occupied Affordable Homes by Ward"
# This code is based on knowledge from Alexander (2023).
# Step 1: Aggregate data by Ward to get the total approved affordable homes
aggregated_data <- data %>%
group_by(Ward) %>%
summarise(Total_Affordable_Homes = sum(Affordable.Homes.Approved..2020...Present., na.rm = TRUE))
# Step 2: Create a bar plot with total approved affordable homes and label the bar heights
ggplot(aggregated_data, aes(x = factor(Ward), y = Total_Affordable_Homes)) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.7) +
geom_text(aes(label = Total_Affordable_Homes), vjust = -0.5, size = 3.5) +  # Adding total homes as labels on top of bars
labs(title = "Occupied Affordable Homes by Ward",
x = "Ward",
y = "Number of Approved Affordable Homes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
#### First Graph ####
#| echo: false
#| warning: false
#| message: false
#| label: fig-occupied
#| fig-cap: "Occupied Affordable Homes by Ward"
# This code is based on knowledge from Alexander (2023).
# Step 1: Aggregate data by Ward to get the total approved affordable homes
aggregated_data <- data %>%
group_by(Ward) %>%
summarise(Total_Affordable_Homes = sum(Affordable.Homes.Approved..2020...Present., na.rm = TRUE))
# Step 2: Create a bar plot with total approved affordable homes and label the bar heights
ggplot(aggregated_data, aes(x = factor(Ward), y = Total_Affordable_Homes)) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.7) +
geom_text(aes(label = Total_Affordable_Homes), vjust = -0.5, size = 3.5) +  # Adding total homes as labels on top of bars
labs(title = "Occupied Affordable Homes by Ward",
x = "Ward",
y = "Number of Approved Affordable Homes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
#| echo: false
#| warning: false
#| message: false
#| label: fig-totalapproved
#| fig-cap: "Total Approved Affordable Homes by Ward"
#### Second Graph ####
# This code is based on knowledge from Alexander (2023).
library(ggplot2)
aggregated_data <- data %>%
group_by(Ward) %>%
summarise(Total_Affordable_Homes = sum(Affordable.Homes.Approved..2020...Present., na.rm = TRUE))
# Create a bar plot for total approved affordable homes by ward with labels
ggplot(aggregated_data, aes(x = factor(Ward), y = Total_Affordable_Homes)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_text(aes(label = Total_Affordable_Homes), vjust = -0.5, size = 3.5) +  # Add labels on top of bars
labs(title = "Total Approved Affordable Homes by Ward",
x = "Ward",
y = "Total Approved Affordable Homes") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_minimal()
#### Third Graph ####
#| echo: false
#| warning: false
#| message: false
#| label: fig-statusdistrubution
#| fig-cap: "Projects Status Distribution"
# This code is based on knowledge from Alexander (2023).
# Create a pie chat for distribution of approved projects' status
data %>%
count(Status) %>%
ggplot(aes(x = "", y = n, fill = Status)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(title = "Project Status Distribution", x = "", y = "") +
theme_void() +
theme(legend.position = "right")
#| echo: false
#| warning: false
#| message: false
#| label: fig-occupied
#| fig-cap: "Occupied Affordable Homes by Ward"
#### First Graph ####
# This code is based on knowledge from Alexander (2023).
# Step 1: Aggregate data by Ward to get the total approved affordable homes
aggregated_data <- data %>%
group_by(Ward) %>%
summarise(Total_Affordable_Homes = sum(Affordable.Homes.Approved..2020...Present., na.rm = TRUE))
# Step 2: Create a bar plot with total approved affordable homes and label the bar heights
ggplot(aggregated_data, aes(x = factor(Ward), y = Total_Affordable_Homes)) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.7) +
geom_text(aes(label = Total_Affordable_Homes), vjust = -0.5, size = 3.5) +  # Adding total homes as labels on top of bars
labs(title = "Occupied Affordable Homes by Ward",
x = "Ward",
y = "Number of Approved Affordable Homes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
#| echo: false
#| warning: false
#| message: false
#| label: fig-statusdistribution
#| fig-cap: "Projects Status Distribution"
# This code is based on knowledge from Alexander (2023).
# Create a pie chart for the distribution of approved projects' status
data %>%
count(Status) %>%
ggplot(aes(x = "", y = n, fill = Status)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(title = "Project Status Distribution", x = "", y = "") +
theme_void() +
theme(legend.position = "right")
#| echo: false
#| include: false
#| message: false
#| warning: false
#### Loading Packages ####
library(opendatatoronto)
library(tidyverse)
library(knitr)
#| echo: false
#| warning: false
#| message: false
knitr::kable(cleaned_data, caption = "Example of Cleaned Affordable Housing Data")
#| echo: false
#| warning: false
#| message: false
cleaned_data <- read.csv("/Users/luuu/Downloads/starter_folder-main/output/data/cleaned_data.csv")
knitr::kable(cleaned_data, caption = "Example of Cleaned Affordable Housing Data")
#| echo: false
#| warning: false
#| message: false
cleaned_data <- read.csv("/Users/luuu/Downloads/starter_folder-main/output/data/cleaned_data.csv")
knitr::kable(cleaned_data, caption = "Example of Cleaned Affordable Housing Data")
#| echo: false
#| warning: false
#| message: false
#| label: tbl-cleaneddata
cleaned_data <- read.csv("/Users/luuu/Downloads/starter_folder-main/output/data/cleaned_data.csv")
#| echo: false
#| include: false
#| message: false
#| warning: false
#### Loading Packages ####
library(opendatatoronto)
library(tidyverse)
library(knitr)
#| echo: false
#| warning: false
#| message: false
#| label: tbl-cleaneddata
cleaned_data <- read.csv("/Users/luuu/Downloads/starter_folder-main/output/data/cleaned_data.csv")
#| echo: false
#| warning: false
#### Preamble ####
# Purpose: Generates a paper titled "Uneven Progress: A Study of Affordable
#Housing Distribution and Development in Torontoâ€™s Wards in PDF format when
# rendered.
# Author: Claire Ma
# Date: September 27, 2024
# Contact: minglu.ma@mail.utoronto.ca
# Pre-requisites: Run the files "01-download_data.R" and "02-data_cleaning.R".
#| echo: false
#| include: false
#| message: false
#| warning: false
#### Loading Packages ####
library(opendatatoronto)
library(tidyverse)
library(knitr)
#| echo: false
#| warning: false
#| message: false
#| label: tbl-cleaneddata
cleaned_data <- read.csv("/Users/luuu/Downloads/starter_folder-main/output/data/cleaned_data.csv")
#| echo: false
#| warning: false
#| message: false
#### Loading the Cleaned Dataset ####
marriage_licence_packages <- search_packages("Affordable Housing Pipeline")
# Retrieve a list of all resources (datasets) available within the found package
marriage_licence_resources <- marriage_licence_packages %>%
list_package_resources()
# Display the list of resources available in the "Marriage Licence Statistics" package
marriage_licence_resources
marriage_licence_statistics <- marriage_licence_resources[4,] %>%
get_resource()
data = marriage_licence_statistics
write_csv(marriage_licence_statistics, "/Users/luuu/Downloads/starter_folder-main/data4.csv")
#| echo: false
#| warning: false
#| message: false
#| label: tbl-cleaneddata
cleaned_data <- read.csv("/Users/luuu/Downloads/starter_folder-main/output/data/cleaned_data.csv")
#| echo: false
#| warning: false
#| message: false
#| label: tbl-cleaneddata
cleaned_data <- read.csv("/Users/luuu/Downloads/starter_folder-main/output/data/cleaned_data.csv")
